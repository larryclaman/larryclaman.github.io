<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Larry Claman&#39;s Blog</title>
    <link>https://larryclaman.github.io/</link>
    <description>Recent content on Larry Claman&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://larryclaman.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Azure Bicep &amp; User Assigned Managed Identity</title>
      <link>https://larryclaman.github.io/post/2021-08-19-21-bicep-uami/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://larryclaman.github.io/post/2021-08-19-21-bicep-uami/</guid>
      <description>&lt;p&gt;This will be a quick one!&lt;/p&gt;
&lt;p&gt;A colleague asked me if it was easier to use &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview&#34;&gt;user assigned managed identities&lt;/a&gt; in Bicep versus ARM.  Well, challenge accepted!&lt;/p&gt;
&lt;p&gt;After about 45 minutes of hacking, I created the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@description(&#39;Web app name.&#39;)
@minLength(2)
param webAppName string = &#39;webApp-${uniqueString(resourceGroup().id)}&#39;

@description(&#39;Location for all resources.&#39;)
param location string = resourceGroup().location

@description(&#39;The SKU of App Service Plan.&#39;)
param sku string = &#39;S1&#39;

@description(&#39;The Runtime stack of current web app&#39;)
param linuxFxVersion string = &#39;DOTNETCORE|5.0&#39;

param uaminame string = &#39;uamitest&#39;

param kvName string = &#39;kv-${uniqueString(resourceGroup().id)}&#39;

@secure()
param secretValue string = uniqueString(newGuid())

var appServicePlanPortalName_var = &#39;${webAppName}-plan&#39;

resource appServicePlanName &#39;Microsoft.Web/serverfarms@2020-06-01&#39; = {
  name: appServicePlanPortalName_var
  location: location
  sku: {
    name: sku
  }
  kind: &#39;linux&#39;
  properties: {
    reserved: true
  }
}

resource webApp_resource &#39;Microsoft.Web/sites@2020-12-01&#39; = {
  name: webAppName
  location: location
  identity: {
    type: &#39;UserAssigned&#39;
    userAssignedIdentities: {
      &#39;${uami.id}&#39;: {}
    }
  }
  properties: {
    serverFarmId: appServicePlanName.id
    siteConfig: {
      linuxFxVersion: linuxFxVersion
    }
    keyVaultReferenceIdentity: uami.id
  }

  resource settings &#39;config&#39; = {
    name: &#39;appsettings&#39;
    properties: {
      //SuperSecret: &#39;@Microsoft.KeyVault(SecretUri=${keyVault::secret.properties.secretUriWithVersion})&#39;
      SuperSecret: &#39;@Microsoft.KeyVault(SecretUri=${keyVault::secret.properties.secretUri})&#39;
    }
  }
}

resource webAppSlot &#39;Microsoft.Web/sites/slots@2020-06-01&#39; = {
  name: &#39;${webAppName}/staging&#39;
  location: location
  kind: &#39;app&#39;
  properties: {
    serverFarmId: appServicePlanPortalName_var
  }
  dependsOn: [
    webApp_resource
  ]
}

// Create a keyvault, and use a nested resource to set a secret
resource keyVault &#39;Microsoft.KeyVault/vaults@2019-09-01&#39; = {
  name: kvName
  location: resourceGroup().location
  properties: {
    enabledForDeployment: false
    enabledForTemplateDeployment: false
    enabledForDiskEncryption: false
    tenantId: subscription().tenantId
    enablePurgeProtection: false
    accessPolicies: [
      {
        tenantId: subscription().tenantId
        objectId: uami.properties.principalId
        permissions: {
          keys: [
            &#39;get&#39;
          ]
          secrets: [
            &#39;list&#39;
            &#39;get&#39;
          ]
        }
      }
    ]
    sku: {
      name: &#39;standard&#39;
      family: &#39;A&#39;
    }
  }

  resource secret &#39;secrets&#39; = {
    name: &#39;mysecret&#39;
    properties: {
      value: secretValue
    }
  }
  dependsOn: [
    uami
  ]
}

// create user assigned managed identity
resource uami &#39;Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30&#39; = {
  name: uaminame
  location: resourceGroup().location
}

// create role assignment
var KEY_VAULT_SECRETS_USER_ROLE_GUID = subscriptionResourceId(&#39;Microsoft.Authorization/roleDefinitions&#39;, &#39;4633458b-17de-408a-b874-0445c86b69e6&#39;)

resource keyVaultWebsiteUser &#39;Microsoft.Authorization/roleAssignments@2020-04-01-preview&#39; = {
  name: guid(&#39;SecretsUser&#39;, webAppName)
  scope: keyVault
  properties: {
    principalId: uami.properties.principalId
    roleDefinitionId: KEY_VAULT_SECRETS_USER_ROLE_GUID
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Key things to point out here with the web app config:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The set of lines
&lt;pre&gt;&lt;code&gt;userAssignedIdentities: {
    &#39;${uami.id}&#39;: {}
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;are where you associate the user-assigned identity id with the web app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;You also need the line &lt;code&gt;keyVaultReferenceIdentity: uami.id&lt;/code&gt; to tell the app service which identity to use when contacting the key vault&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cool stuff!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easily create DNS names with Azure Kubernetes Service</title>
      <link>https://larryclaman.github.io/post/2021-04-04-aks-dns-naming/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://larryclaman.github.io/post/2021-04-04-aks-dns-naming/</guid>
      <description>&lt;p&gt;When working with Azure Kubernetes Service (AKS), there are lots and lots of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/tutorial-kubernetes-deploy-application&#34;&gt;examples&lt;/a&gt; of how
to create a loadbalancer service with public IP address.  Most, if not all, of these examples recommend that you access the service by IP address rather than by using a DNS name.&lt;/p&gt;
&lt;p&gt;I was recently leading a workshop which covered this topic, and I wondered if there was an easy way to get AKS to assign a DNS name for a loadbalancer service.  It turns out, there is, but it&amp;rsquo;s not documented well and is hidden within the AKS documentation.&lt;/p&gt;
&lt;p&gt;The method is documented on &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/static-ip#apply-a-dns-label-to-the-service&#34;&gt;this page&lt;/a&gt;, and it&amp;rsquo;s actually pretty straightforward to use.  The trick is to set the following metadata annotation on your service:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;metadata:
  annotations:
    service.beta.kubernetes.io/azure-dns-label-name: yourchosendnsname
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By using this annotation, AKS will create a DNS record of the form &lt;code&gt;[yourchosendnsname].[location].cloudapp.azure.com&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;walk-through&#34;&gt;Walk-Through&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s walk through an example by deploying the sample &amp;lsquo;Azure Voting App&amp;rsquo; from the &lt;a href=&#34;https://github.com/Azure-Samples/azure-voting-app-redis/blob/master/azure-vote-all-in-one-redis.yaml&#34;&gt;Azure Documentation&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/Azure-Samples/azure-voting-app-redis/master/azure-vote-all-in-one-redis.yaml
 
kubectl get services
NAME               TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)        AGE
azure-vote-back    ClusterIP      10.0.73.110    &amp;lt;none&amp;gt;         6379/TCP       7s
azure-vote-front   LoadBalancer   10.0.135.119   52.251.9.116   80:30118/TCP   7s
kubernetes         ClusterIP      10.0.0.1       &amp;lt;none&amp;gt;         443/TCP        10m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected, the azure-vote-front service is available via a public IP.  Now, let&amp;rsquo;s modify the service definition to use the annotation; I&amp;rsquo;m going to use the label &lt;strong&gt;larryvote&lt;/strong&gt;, which should create the dns record larryvote.eastus2.cloudapp.com:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  annotations:
    service.beta.kubernetes.io/azure-dns-label-name: larryvote
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: azure-vote-front
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s check to see if it worked:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; nslookup larryvote.eastus2.cloudapp.azure.com

Non-authoritative answer:
Name:   larryvote.eastus2.cloudapp.azure.com
Address: 52.251.9.116
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yep, it worked!   You next thought may be, &amp;ldquo;That&amp;rsquo;s great, but I don&amp;rsquo;t want to use that ugly domain name.  How can I use my own domain name?&amp;rdquo;  The solution to this is also straightforward: use a CNAME.&lt;/p&gt;
&lt;h3 id=&#34;using-a-cname&#34;&gt;Using a CNAME&lt;/h3&gt;
&lt;p&gt;In my case, I own the domain &lt;strong&gt;claman.org&lt;/strong&gt;.  So I simply need to create a cname for larryvote.claman.org pointing to larryvote.eastus2.cloudapp.azure.com.  Let&amp;rsquo;s check what that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; nslookup larryvote.claman.org

Non-authoritative answer:
larryvote.claman.org    canonical name = larryvote.eastus2.cloudapp.azure.com.
Name:   larryvote.eastus2.cloudapp.azure.com
Address: 52.251.9.116
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Easy Peasy!  Of course you can access the web page via this name:
&lt;img src=&#34;webpage.png&#34; alt=&#34;web page&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns-labels-for-nginx-ingress&#34;&gt;DNS Labels for Nginx Ingress&lt;/h3&gt;
&lt;p&gt;Suppose you want to use an nginx ingress rather than a load balancer service?  You can use this same method, but it&amp;rsquo;s slightly more complicated.  Again, it&amp;rsquo;s documented, but not well, on &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/ingress-static-ip&#34;&gt;this page&lt;/a&gt;.  Specifically, you need to set &lt;code&gt;controller.service.annotations.&amp;quot;service\.beta\.kubernetes\.io/azure-dns-label-name&amp;quot;=&amp;quot;yourdnslabel&amp;quot;&lt;/code&gt;, where &lt;em&gt;yourdnslabel&lt;/em&gt; is the dns name you want to use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create Issues Automatically with Dependabot</title>
      <link>https://larryclaman.github.io/post/2020-11-15-dependabot/</link>
      <pubDate>Sun, 15 Nov 2020 20:27:50 -0500</pubDate>
      
      <guid>https://larryclaman.github.io/post/2020-11-15-dependabot/</guid>
      <description>&lt;p&gt;I recently coached a DevOps hackathon where one of the success criteria was &amp;ldquo;Every PR must have an associated Issue&amp;rdquo;.  This is easy to enforce in Azure DevOps, and while it can&amp;rsquo;t be currently enforced in GitHub, it&amp;rsquo;s possible to use &lt;a href=&#34;https://github.com/hattan/verify-linked-issue-action/&#34;&gt;this&lt;/a&gt; GitHub Action to verify that all pull requests in your repo contain a reference to an issue.&lt;/p&gt;
&lt;p&gt;All fine and good, except that when I turned on Dependabot for my repo, I realized that Dependabot only creates pull requests, but it does not create issues, which doesn&amp;rsquo;t meet my success criteria.  Well, GitHub workflows to the rescue!  The following workflow will create an issue whenever Dependabot opens a PR:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name: CreateDependabotIssue
on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    types: [ opened, reopened]

jobs:
  issue:
      runs-on: ubuntu-latest
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      steps:
        - uses: actions/checkout@v2
          if: github.event.pull_request.user.login  == &#39;dependabot[bot]&#39;
          
        - name: Open issue if Dependabot PR
          if: github.event.pull_request.user.login  == &#39;dependabot[bot]&#39;
          env:
            pr_title: ${{github.event.pull_request.title}}
            pr_number: ${{github.event.pull_request.number}}
            pr_url: ${{github.event.pull_request.url}}
          run: |
            title=&amp;quot;Dependabot PR $pr_title opened&amp;quot;
            body=&amp;quot;Dependabot has opened PR #$pr_number
            Link: $pr_url&amp;quot;
            gh issue create --title &amp;quot;$title&amp;quot; --body &amp;quot;$body&amp;quot;    
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Converting an Azure VM to a Spot type</title>
      <link>https://larryclaman.github.io/post/2020-04-14-azure-spot/</link>
      <pubDate>Tue, 14 Apr 2020 20:16:12 -0400</pubDate>
      
      <guid>https://larryclaman.github.io/post/2020-04-14-azure-spot/</guid>
      <description>&lt;p&gt;The Azure team recently announced support for &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/announcing-the-preview-of-azure-spot-virtual-machines/&#34;&gt;Spot Virtual Machines&lt;/a&gt;.  In case you&amp;rsquo;re not familiar, &lt;em&gt;&amp;ldquo;Azure Spot Virtual Machines provide access to unused Azure compute capacity at deep discounts.&amp;quot;&lt;/em&gt;  The tradeoff is, a Spot VM can be evicted at any time.&lt;/p&gt;
&lt;p&gt;Currently, there&amp;rsquo;s no way to dynamically change an existing VM type to become a Spot.  However, using PowerShell, you can perform some &amp;lsquo;magic&amp;rsquo; to reprovision an existing VM as a new Spot instance.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the script I put together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;cm&#34;&gt;&amp;lt;# Convert a VM to a Spot VM
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;Based on sample script at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/change-availability-set
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;NOTE:  Extensions will not be copied to new instance!!
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;#&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# Set variables to your specifics&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$resourceGroup&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;myRG&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$vmName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;myVM&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# Get the details of the VM to be moved to the Availability Set&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-AzVM&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-ResourceGroupName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$resourceGroup&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$vmName&lt;/span&gt;
 
&lt;span class=&#34;c&#34;&gt;# Create the basic configuration for the replacement VM. &lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$newVM&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-AzVMConfig&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-VMName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-VMSize&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HardwareProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VmSize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-Priority&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Spot&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-MaxPrice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# Confgure OS Disk&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;Set-AzVMOSDisk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-VM&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$newVM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-CreateOption&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Attach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-ManagedDiskId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StorageProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OsDisk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ManagedDisk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StorageProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OsDisk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; 

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OSProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WindowsConfiguration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$newVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StorageProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OsDisk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OsType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Windows&amp;#34;&lt;/span&gt; 
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$newVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StorageProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OsDisk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OsType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Linux&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  

&lt;span class=&#34;c&#34;&gt;# Add Data Disks&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$disk&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StorageProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataDisks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;nb&#34;&gt;Add-AzVMDataDisk&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-VM&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$newVM&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-ManagedDiskId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ManagedDisk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-Caching&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Caching&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-Lun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lun&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-DiskSizeInGB&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DiskSizeGB&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-CreateOption&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Attach&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;c&#34;&gt;# Add NIC(s) and keep the same NIC as primary&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$nic&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NetworkProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NetworkInterfaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$nic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Primary&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;Add-AzVMNetworkInterface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;-VM&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$newVM&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;-Id&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$nic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Primary&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                 &lt;span class=&#34;nb&#34;&gt;Add-AzVMNetworkInterface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;-VM&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$newVM&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
                 &lt;span class=&#34;n&#34;&gt;-Id&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$nic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; 
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AvailabilitySetReference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Warning: VM $originalVM.Name is in an availability set.  Spot VMs cannot run in availability sets.&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# Remove the original VM&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;Remove-AzVM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ResourceGroupName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$resourceGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$vmName&lt;/span&gt;   

&lt;span class=&#34;c&#34;&gt;# Recreate the VM&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;New-AzVM&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-ResourceGroupName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$resourceGroup&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-Location&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$originalVM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-VM&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$newVM&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;-DisableBginfoExtension&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Querying for Azure Regional Pairs</title>
      <link>https://larryclaman.github.io/post/2020-04-09-querying-for-azure-regional-pairs/</link>
      <pubDate>Thu, 09 Apr 2020 18:16:04 -0400</pubDate>
      
      <guid>https://larryclaman.github.io/post/2020-04-09-querying-for-azure-regional-pairs/</guid>
      <description>&lt;p&gt;A teammate recently posted a question on our Team&amp;rsquo;s channel, asking how to programmatically query to find out an Azure Region&amp;rsquo;s pair.  Easy I thought - except it turns out, this isn&amp;rsquo;t exposed in the standard PowerShell commands, nor in the Azure CLI.&lt;/p&gt;
&lt;p&gt;The PowerShell command &lt;strong&gt;Get-AzLocation&lt;/strong&gt; only returns the Location, DisplayName, and Providers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; Get-AzLocation|ft

Location           DisplayName          Providers
--------           -----------          ---------
eastasia           East Asia            {Microsoft.Media, Microsoft.HDInsight, Microsoft.SqlVirtualMachine, Microsoft.DevOps...}
southeastasia      Southeast Asia       {Microsoft.Media, Microsoft.HDInsight, Microsoft.DataShare, Microsoft.SqlVirtualMachine...}
centralus          Central US           {Microsoft.Media, Microsoft.HDInsight, Microsoft.SqlVirtualMachine, Microsoft.DevOps...}
eastus             East US              {Microsoft.Media, Microsoft.HDInsight, Microsoft.DataShare, Microsoft.SqlVirtualMachine...}
[snip]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Meanwhile, the Azure CLI returns more info, but not the pair:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; az account list-locations
DisplayName           Latitude    Longitude    Name
--------------------  ----------  -----------  ------------------
East Asia             22.267      114.188      eastasia
Southeast Asia        1.283       103.833      southeastasia
Central US            41.5908     -93.6208     centralus
East US               37.3719     -79.8164     eastus
East US 2             36.6681     -78.3889     eastus2
West US               37.783      -122.417     westus
[snip]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Edit:  Skip to the bottom of this blog for a new, simplified solution!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;All hope is not lost!  You can find the region&amp;rsquo;s pair, but you need to query the Azure REST api directly, as documented at &lt;a href=&#34;https://docs.microsoft.com/en-us/rest/api/resources/Subscriptions/ListLocations&#34;&gt;https://docs.microsoft.com/en-us/rest/api/resources/Subscriptions/ListLocations&lt;/a&gt;.  In the past, you&amp;rsquo;d need to fire up your favorite REST client (eg, &lt;a href=&#34;https://github.com/projectkudu/ARMClient&#34;&gt;armclient&lt;/a&gt;, Vscode + &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=humao.rest-client&#34;&gt;rest client extension&lt;/a&gt;, Postman, etc), but in exploring this, I learned an easier way:  You can now make Azure REST calls directly from the CLI!  Here&amp;rsquo;s what that looks like:   &lt;em&gt;(Replace {yoursubid} with your specific subscription id)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;az rest --method GET --uri https://management.azure.com/subscriptions/{yoursubid}/locations?api-version=2020-01-01 --output json
{
  &amp;quot;value&amp;quot;: [
    {
      &amp;quot;displayName&amp;quot;: &amp;quot;East US&amp;quot;,
      &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/{yoursubid}/locations/eastus&amp;quot;,
      &amp;quot;metadata&amp;quot;: {
        &amp;quot;geographyGroup&amp;quot;: &amp;quot;US&amp;quot;,
        &amp;quot;latitude&amp;quot;: &amp;quot;37.3719&amp;quot;,
        &amp;quot;longitude&amp;quot;: &amp;quot;-79.8164&amp;quot;,
        &amp;quot;pairedRegion&amp;quot;: [
          {
            &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/{yoursubid}/locations/westus&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;westus&amp;quot;
          }
        ],
        &amp;quot;physicalLocation&amp;quot;: &amp;quot;Virginia&amp;quot;,
        &amp;quot;regionCategory&amp;quot;: &amp;quot;Recommended&amp;quot;,
        &amp;quot;regionType&amp;quot;: &amp;quot;Physical&amp;quot;
      },
      &amp;quot;name&amp;quot;: &amp;quot;eastus&amp;quot;,
      &amp;quot;regionalDisplayName&amp;quot;: &amp;quot;(US) East US&amp;quot;
    },
[snip]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What&amp;rsquo;s really cool is you can use the CLI&amp;rsquo;s built-in jmespath query engine to filter and massage the results, eg: &lt;em&gt;(Column1 is the region, and Column2 is the pair)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;az rest --method GET --uri https://management.azure.com/subscriptions/{yoursubid}/locations?api-version=2020-01-01 --output table --query &#39;value[].[name,metadata.pairedRegion[].name]&#39;

Column1              Column2
-------------------  ----------------------
eastus               [&#39;westus&#39;]
eastus2              [&#39;centralus&#39;]
southcentralus       [&#39;northcentralus&#39;]
westus2              [&#39;westcentralus&#39;]
australiaeast        [&#39;australiasoutheast&#39;]
[snip]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(I&amp;rsquo;m still working on my jmespath ninja skills, so there&amp;rsquo;s still a little cleanup to be done on this table, but it gets the point across.)&lt;/p&gt;
&lt;p&gt;EDIT Feb 2021:  Subsequent to my posting this blog, it appears that you now CAN indeed get the pair info directly from the AZ cli.  Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;az account list-locations -o table --query &#39;[].[displayName, name, metadata.physicalLocation, metadata.regionCategory,metadata.pairedRegion[0].name]&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Trigger Azure DevOps Build pipeline from Docker image update</title>
      <link>https://larryclaman.github.io/post/2019-11-10-trigger-docker-build-azdo/</link>
      <pubDate>Sun, 10 Nov 2019 21:42:45 -0500</pubDate>
      
      <guid>https://larryclaman.github.io/post/2019-11-10-trigger-docker-build-azdo/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the first in a series of posts about automating Docker image builds.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-to-trigger-a-build&#34;&gt;How to trigger a build?&lt;/h2&gt;
&lt;p&gt;I was recently asked how to trigger a classic (gui) Azure DevOps build pipeline when a Docker base image updates.  You might want to do this, for example, if your build pipeline includes unit, functional, or security tests.&lt;/p&gt;
&lt;p&gt;My immediate answer was &amp;ldquo;you can&amp;rsquo;t.&amp;rdquo;  However, after a little investigation and a little hacking, I was able to prototype a solution using the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-tutorial-base-image-update&#34;&gt;automated trigger &amp;amp; build feature&lt;/a&gt; of Azure Container Registry (ACR).  The hint for how to do this was buried in the &lt;a href=&#34;https://github.com/MicrosoftDocs/azure-docs/issues/34480&#34;&gt;Q&amp;amp;A&lt;/a&gt; on documentation page, where it&amp;rsquo;s suggested to use a dummy image to trigger the AzDo pipeline.  Here&amp;rsquo;s a walkthrough of how I did this:&lt;/p&gt;
&lt;h2 id=&#34;sample-repo--pipeline&#34;&gt;Sample Repo &amp;amp; Pipeline&lt;/h2&gt;
&lt;p&gt;As a sample repo, I used the canonical &lt;a href=&#34;https://dev.azure.com/larrydevopstest/_git/AzureVotingApp&#34;&gt;Azure voting app&lt;/a&gt;, but I simplified it a bit to suit my needs. My Dockerfile is pretty simple; my goal is for the build pipeline to run whenever the base python:3.6-slim image is updated on Dockerhub.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM python:3.6-slim
RUN pip install redis
RUN pip install flask
ADD /azure-vote /app

CMD [ &amp;quot;python&amp;quot;, &amp;quot;/app/main.py&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;step-1--create-a-dummy-base-image-and-task-in-acr&#34;&gt;Step 1:  Create a dummy base image and task in ACR&lt;/h3&gt;
&lt;p&gt;As I mentioned above, I&amp;rsquo;m going to build a dummy base image using ACR, and then use a webhook when this image updates to trigger my Azure DevOps pipeline.&lt;/p&gt;
&lt;p&gt;First, I&amp;rsquo;ll need to follow the instructions &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-tutorial-base-image-update&#34;&gt;here&lt;/a&gt; to create a dummy base image and a task to update it when its reference base updates on Dockerhub.&lt;/p&gt;
&lt;p&gt;To start, build the base image in ACR:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ACR_NAME=larrymsvoting
REPO=&amp;quot;https://larrydevopstest@dev.azure.com/larrydevopstest/AzureVotingApp/_git/AzureVotingApp&amp;quot;
DOCKER_FILE=&amp;quot;azure-vote/Dockerfile-pythonbase&amp;quot;

az acr build --registry $ACR_NAME -t baseimages/python-3.6-slim-base \
    --file $DOCKER_FILE $REPO
    
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;step-2-create-a-task&#34;&gt;Step 2: Create a task&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;az acr task create \
    --registry $ACR_NAME \
    --name taskpythonbase \
    -t baseimages/python-3.6-slim-base:{{.Run.ID}} \
    --arg REGISTRY_NAME=$ACR_NAME.azurecr.io \
    --context $REPO \
    --file Dockerfile-pythonbase \
    --commit-trigger-enabled false \
    -o table
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assuming it runs successfully, you&amp;rsquo;ll see output like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NAME            PLATFORM    STATUS    SOURCE REPOSITORY                                                                         TRIGGERS
--------------  ----------  --------  ----------------------------------------------------------------------------------------  ----------
taskpythonbase  linux       Enabled   https://larrydevopstest@dev.azure.com/larrydevopstest/AzureVotingApp/_git/AzureVotingApp  BASE_IMAGE
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;step-3-logic-app&#34;&gt;Step 3: Logic App&lt;/h3&gt;
&lt;p&gt;Now comes the fun part: getting the base image update to trigger a build in Azure DevOps.  We&amp;rsquo;ll start by creating a logic app.
In the portal, create a logic app and give it a relevant name, eg &amp;lsquo;pythonbasetrigger&amp;rsquo;.  In the Logic Apps Designer pane, use &amp;ldquo;When an HTTP Request is Received&amp;rdquo; as the trigger.&lt;/p&gt;
&lt;p&gt;Add a new step, then type &amp;lsquo;Azure DevOps&amp;rsquo; in the search field, then choose &amp;lsquo;Queue a new build&amp;rsquo; as the action.  After authenticating, choose the account name, project name, and build id (eg, pipleline).  Once it&amp;rsquo;s saved, it should like like:
&lt;img src=&#34;logicapp.png&#34; alt=&#34;logic app&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can test the logic app by pressing &amp;lsquo;Run&amp;rsquo;, which should kick off an Azure DevOps pipeline build.&lt;/p&gt;
&lt;p&gt;Finally, in your logic apps&amp;rsquo;s first step &amp;lsquo;When an HTTP request is received&amp;rsquo;, find the post URL and copy it, as it will be needed for the next step.&lt;/p&gt;
&lt;h2 id=&#34;step-4-acr-webhook&#34;&gt;Step 4: ACR webhook&lt;/h2&gt;
&lt;p&gt;Next, we&amp;rsquo;ll create an ACR webhook which fires whenever the base image updates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;URI=&amp;lt;webhook post url from prior step&amp;gt;

az acr webhook create -n pythonbasehook -r $ACR_NAME \
    --scope baseimages/python-3.6-slim-base \
    --actions push --uri $URI
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-5-enjoy&#34;&gt;Step 5: Enjoy!&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve done it!  We now have a set up a set of integrations that does the following:
&lt;img src=&#34;flow.png&#34; alt=&#34;flow&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-6-test&#34;&gt;Step 6: Test&lt;/h2&gt;
&lt;p&gt;Since the Dockerhub base image is only going to be updated periodically, you can test your integration by manually running a build in ACR:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;az acr build --registry $ACR_NAME -t baseimages/python-3.6-slim-base \
    --file $DOCKER_FILE $REPO
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If all is working, this should trigger a build in Azure DevOps.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;An alternative to using a webhook would be to use an Event Grid to trigger the Logic App.  This is slightly more work to set up, but it might better if you have a number of different pipelines that want to receive notifications when a base image updates.  With a webhook, you&amp;rsquo;d need to set up a trigger for each and every one of them.  Eventgrid, having a pubsub architecture, would fan-out one:many more effectively than webhooks.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
