<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>identity on Larry Claman&#39;s Blog</title>
    <link>https://larryclaman.github.io/tags/identity/</link>
    <description>Recent content in identity on Larry Claman&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://larryclaman.github.io/tags/identity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Azure Bicep &amp; User Assigned Managed Identity</title>
      <link>https://larryclaman.github.io/post/2021-08-19-21-bicep-uami/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://larryclaman.github.io/post/2021-08-19-21-bicep-uami/</guid>
      <description>&lt;p&gt;This will be a quick one!&lt;/p&gt;
&lt;p&gt;A colleague asked me if it was easier to use &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview&#34;&gt;user assigned managed identities&lt;/a&gt; in Bicep versus ARM.  Well, challenge accepted!&lt;/p&gt;
&lt;p&gt;After about 45 minutes of hacking, I created the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@description(&#39;Web app name.&#39;)
@minLength(2)
param webAppName string = &#39;webApp-${uniqueString(resourceGroup().id)}&#39;

@description(&#39;Location for all resources.&#39;)
param location string = resourceGroup().location

@description(&#39;The SKU of App Service Plan.&#39;)
param sku string = &#39;S1&#39;

@description(&#39;The Runtime stack of current web app&#39;)
param linuxFxVersion string = &#39;DOTNETCORE|5.0&#39;

param uaminame string = &#39;uamitest&#39;

param kvName string = &#39;kv-${uniqueString(resourceGroup().id)}&#39;

@secure()
param secretValue string = uniqueString(newGuid())

var appServicePlanPortalName_var = &#39;${webAppName}-plan&#39;

resource appServicePlanName &#39;Microsoft.Web/serverfarms@2020-06-01&#39; = {
  name: appServicePlanPortalName_var
  location: location
  sku: {
    name: sku
  }
  kind: &#39;linux&#39;
  properties: {
    reserved: true
  }
}

resource webApp_resource &#39;Microsoft.Web/sites@2020-12-01&#39; = {
  name: webAppName
  location: location
  identity: {
    type: &#39;UserAssigned&#39;
    userAssignedIdentities: {
      &#39;${uami.id}&#39;: {}
    }
  }
  properties: {
    serverFarmId: appServicePlanName.id
    siteConfig: {
      linuxFxVersion: linuxFxVersion
    }
    keyVaultReferenceIdentity: uami.id
  }

  resource settings &#39;config&#39; = {
    name: &#39;appsettings&#39;
    properties: {
      //SuperSecret: &#39;@Microsoft.KeyVault(SecretUri=${keyVault::secret.properties.secretUriWithVersion})&#39;
      SuperSecret: &#39;@Microsoft.KeyVault(SecretUri=${keyVault::secret.properties.secretUri})&#39;
    }
  }
}

resource webAppSlot &#39;Microsoft.Web/sites/slots@2020-06-01&#39; = {
  name: &#39;${webAppName}/staging&#39;
  location: location
  kind: &#39;app&#39;
  properties: {
    serverFarmId: appServicePlanPortalName_var
  }
  dependsOn: [
    webApp_resource
  ]
}

// Create a keyvault, and use a nested resource to set a secret
resource keyVault &#39;Microsoft.KeyVault/vaults@2019-09-01&#39; = {
  name: kvName
  location: resourceGroup().location
  properties: {
    enabledForDeployment: false
    enabledForTemplateDeployment: false
    enabledForDiskEncryption: false
    tenantId: subscription().tenantId
    enablePurgeProtection: false
    accessPolicies: [
      {
        tenantId: subscription().tenantId
        objectId: uami.properties.principalId
        permissions: {
          keys: [
            &#39;get&#39;
          ]
          secrets: [
            &#39;list&#39;
            &#39;get&#39;
          ]
        }
      }
    ]
    sku: {
      name: &#39;standard&#39;
      family: &#39;A&#39;
    }
  }

  resource secret &#39;secrets&#39; = {
    name: &#39;mysecret&#39;
    properties: {
      value: secretValue
    }
  }
  dependsOn: [
    uami
  ]
}

// create user assigned managed identity
resource uami &#39;Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30&#39; = {
  name: uaminame
  location: resourceGroup().location
}

// create role assignment
var KEY_VAULT_SECRETS_USER_ROLE_GUID = subscriptionResourceId(&#39;Microsoft.Authorization/roleDefinitions&#39;, &#39;4633458b-17de-408a-b874-0445c86b69e6&#39;)

resource keyVaultWebsiteUser &#39;Microsoft.Authorization/roleAssignments@2020-04-01-preview&#39; = {
  name: guid(&#39;SecretsUser&#39;, webAppName)
  scope: keyVault
  properties: {
    principalId: uami.properties.principalId
    roleDefinitionId: KEY_VAULT_SECRETS_USER_ROLE_GUID
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Key things to point out here with the web app config:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The set of lines
&lt;pre&gt;&lt;code&gt;userAssignedIdentities: {
    &#39;${uami.id}&#39;: {}
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;are where you associate the user-assigned identity id with the web app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;You also need the line &lt;code&gt;keyVaultReferenceIdentity: uami.id&lt;/code&gt; to tell the app service which identity to use when contacting the key vault&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cool stuff!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
